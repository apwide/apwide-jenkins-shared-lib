<p>
Notify Apwide Golive about environment status based on check provided as closure. (notify status change only if different of what is in Golive)
Apwide environment is passed to the check closure.
</p>
<p></p>
<dl>
    <dt>environmentId</dt><dd>Environment id. (if null, read from env.APW_ENVIRONMENT_ID)</dd>
    <dt>application</dt><dd>Environment Application name. (if null, read from env.APW_APPLICATION)</dd>
    <dt>category</dt><dd>Environment Category name. (if null, read from env.APW_CATEGORY)</dd>
    <dt>unavailableStatus</dt><dd>Status name when environment is unavailable. (if null, read from env.APW_UNAVAILABLE_STATUS, default is 'Down')</dd>
    <dt>availableStatus</dt><dd>Status name when environment is available. (if null, read from env.APW_AVAILABLE_STATUS, default is 'Up')</dd>
    <dt>checkStatus</dt><dd>Closure used to check environment status. If exception is thrown, environment considered not available. If not provided,
    A simple http request will be triggered on the environment URL</dd>
</dl>
<br/>
<p>Usage example:</p>
<pre><code>
apwCheckEnvironmentStatus environmentId: 58, unavailableStatus:'Down', availableStatus:'Up', checkStatus:{ environment ->
    sh 'timeout 5 wget --retry-connrefused --tries=5 --waitretry=1 -q ${environment.url} -O /dev/null'
}
apwCheckEnvironmentStatus application:'eCommerce', category:'Dev', unavailableStatus:'Down', availableStatus:'Up', checkStatus:{ environment ->
    sh 'timeout 5 wget --retry-connrefused --tries=5 --waitretry=1 -q ${environment.url} -O /dev/null'
}
</code></pre>
